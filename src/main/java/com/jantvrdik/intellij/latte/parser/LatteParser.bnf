{
	parserClass="com.jantvrdik.intellij.latte.parser.LatteParser"
	parserUtilClass="com.jantvrdik.intellij.latte.parser.LatteParserUtil"

	extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

	psiClassPrefix="Latte"
	psiImplClassSuffix="Impl"
	psiPackage="com.jantvrdik.intellij.latte.psi"
	psiImplPackage="com.jantvrdik.intellij.latte.psi.impl"
	psiImplUtilClass="com.jantvrdik.intellij.latte.psi.impl.LattePsiImplUtil"

	elementTypeHolderClass="com.jantvrdik.intellij.latte.psi.LatteTypes"
	elementTypeClass="com.jantvrdik.intellij.latte.psi.LatteElementType"
	tokenTypeClass="com.jantvrdik.intellij.latte.psi.LatteTokenType"
}

root             ::= (structureToken)* autoClosedBlock?

// macro
private
//macro            ::= macroComment | macroClassic
macro            ::= macroComment | (
                                         <<checkPairMacro true>> (<<checkEmptyMacro>> emptyMacro | pairMacro)
                                        | <<checkPairMacro false>> unpairedMacro
                                    )

macroComment     ::= T_MACRO_COMMENT
fake
macroClassic     ::= macroTag macroTag?{
                     	methods = [
                     		openTag="macroTag[0]"
                     		closeTag="macroTag[1]"
                     	]
                     }

pairMacro        ::= macroOpenTag structureToken* macroCloseTag? { //incomplete pair macro is handled in a annotator
                            extends=macroClassic
                            methods=[getMacroOpenTag]
                        }

emptyMacro       ::= emptyMacroTag {
                            extends=macroClassic
                        }

unpairedMacro    ::= macroOpenTag {
                            extends=macroClassic
                        }

fake
macroTag         ::= classicMacroContent {
                     	methods = [
                     		getMacroName
                     		matchMacroName
                     		getMacroNameLength
                     		macroContent="macroContent"
                     	]
                     }

macroOpenTag     ::= T_MACRO_OPEN_TAG_OPEN classicMacroContent T_MACRO_TAG_CLOSE {
                        pin=1
                        mixin="com.jantvrdik.intellij.latte.psi.impl.elements.LatteMacroTagElementImpl"
                        implements="com.jantvrdik.intellij.latte.psi.elements.LatteMacroTagElement"
                        methods=[getName setName getNameIdentifier getMacroName matchMacroName getMacroNameLength]
                        extends = macroTag
                     }

macroCloseTag    ::= T_MACRO_CLOSE_TAG_OPEN classicMacroContent T_MACRO_TAG_CLOSE {
                        pin=1
                        mixin="com.jantvrdik.intellij.latte.psi.impl.elements.LatteMacroTagElementImpl"
                        implements="com.jantvrdik.intellij.latte.psi.elements.LatteMacroTagElement"
                        methods=[getName setName getNameIdentifier getMacroName matchMacroName getMacroNameLength]
                     	extends = macroTag
                     }

emptyMacroTag    ::= T_MACRO_OPEN_TAG_OPEN classicMacroContent T_MACRO_TAG_CLOSE_EMPTY {
                        pin=1
                     	extends = macroTag
                     }


private
classicMacroContent     ::= macroName macroContent?

macroContent ::= macroArgs? (T_MACRO_MODIFIERS macroArgs)* {
                        methods=[getFirstPhpContent getMacroNameElement]
                    }

private
macroName        ::= T_MACRO_NAME
                   | T_MACRO_NOESCAPE? T_MACRO_SHORTNAME?

private
macroArgs        ::= phpContent

// autoClosedBlock
//autoClosedBlock  ::= &("{block" macroContent? "}") macroOpenTag structureToken*
autoClosedBlock  ::= macroOpenTag structureToken*



// netteAttr
netteAttr        ::= T_HTML_TAG_NATTR_NAME T_WHITESPACE* (T_HTML_TAG_ATTR_EQUAL_SIGN netteAttrValue)? {
                        methods = [
                            attrName="T_HTML_TAG_NATTR_NAME"
                            attrValue="netteAttrValue"
                        ]
                     }

netteAttrValue   ::= T_HTML_TAG_ATTR_SQ macroContent? T_HTML_TAG_ATTR_SQ
                   | T_HTML_TAG_ATTR_DQ macroContent? T_HTML_TAG_ATTR_DQ
                   | macroContent?

// HTML tokens
outerHtml ::= htmlTag | T_TEXT | T_HTML_CLOSE_TAG_OPEN | T_HTML_OPEN_TAG_OPEN | T_HTML_OPEN_TAG_CLOSE | T_HTML_TAG_CLOSE;

private
htmlTag            ::= <<checkPairHtmlTag true>> htmlPairTag | <<checkPairHtmlTag false>> htmlEmptyTag

htmlPairTag         ::= htmlOpenTag htmlTagContainer htmlCloseTag

htmlTagContainer     ::= (htmlTag | T_TEXT | macro | (pairMacro | unpairedMacro))* {
                                methods=[getHtmlOpenTag]
                            }

htmlTagContent         ::= (netteAttr | macro | T_TEXT | (pairMacro | unpairedMacro))*

htmlOpenTag     ::= T_HTML_OPEN_TAG_OPEN htmlTagContent T_HTML_TAG_CLOSE {
                        pin=1
                        methods=[getHtmlTagName]
                     }

htmlCloseTag    ::= T_HTML_CLOSE_TAG_OPEN htmlTagContent T_HTML_TAG_CLOSE {
                     pin=1
                  }

htmlEmptyTag    ::= T_HTML_OPEN_TAG_OPEN htmlTagContent (T_HTML_OPEN_TAG_CLOSE | T_HTML_TAG_CLOSE) {
                        pin=1
                     }

// PHP tokens
phpContent       ::= (phpForeach | phpFor | phpArrayOfVariables | phpArray | phpKeyArrayItem | blockName | linkDestination | phpInternalExpression)+

blockName        ::= "#" T_PHP_IDENTIFIER

linkDestination    ::= T_LINK_DESTINATION T_LINK_DESTINATION*

phpVariable        ::= T_MACRO_ARGS_VAR phpArrayUsage* {
                        mixin="com.jantvrdik.intellij.latte.psi.impl.elements.LattePhpVariableElementImpl"
                        implements="com.jantvrdik.intellij.latte.psi.elements.LattePhpVariableElement"
                        elementTypeClass="com.jantvrdik.intellij.latte.indexes.stubs.types.LattePhpVariableStubType"
                        methods=[
                            getName setName getNameIdentifier getTextElement getVariableName getVariableDefinition
                            getPhpArrayLevel getReturnType getPhpType getPhpStatementPart getVariableContext
                        ]
                    }

phpStaticVariable  ::= T_MACRO_ARGS_VAR phpArrayUsage* {
                        mixin="com.jantvrdik.intellij.latte.psi.impl.elements.LattePhpStaticVariableElementImpl"
                        implements="com.jantvrdik.intellij.latte.psi.elements.LattePhpStaticVariableElement"
                        elementTypeClass="com.jantvrdik.intellij.latte.indexes.stubs.types.LattePhpStaticVariableStubType"
                        methods=[
                            getName setName getNameIdentifier getTextElement getVariableName getPhpArrayLevel
                            getReturnType getPhpStatementPart
                        ]
                    }

phpMethod        ::= (T_PHP_IDENTIFIER | phpVariable | (T_PHP_NAMESPACE_RESOLUTION T_PHP_NAMESPACE_REFERENCE)) T_WHITESPACE? phpArgumentList T_WHITESPACE? phpArrayUsage* {
                        mixin="com.jantvrdik.intellij.latte.psi.impl.elements.LattePhpMethodElementImpl"
                        implements="com.jantvrdik.intellij.latte.psi.elements.LattePhpMethodElement"
                        elementTypeClass="com.jantvrdik.intellij.latte.indexes.stubs.types.LattePhpMethodStubType"
                        methods=[
                            getName setName getNameIdentifier getTextElement getMethodName getPhpArrayLevel
                            getReturnType isStatic isFunction getPhpStatementPart
                        ]
                    }

phpConstant        ::= T_PHP_IDENTIFIER phpArrayUsage* {
                        mixin="com.jantvrdik.intellij.latte.psi.impl.elements.LattePhpConstantElementImpl"
                        implements="com.jantvrdik.intellij.latte.psi.elements.LattePhpConstantElement"
                        elementTypeClass="com.jantvrdik.intellij.latte.indexes.stubs.types.LattePhpConstantStubType"
                        methods=[
                            getName setName getNameIdentifier getTextElement getConstantName getPhpArrayLevel
                            getReturnType getPhpStatementPart
                        ]
                    }

phpProperty        ::= T_PHP_IDENTIFIER phpArrayUsage* {
                        mixin="com.jantvrdik.intellij.latte.psi.impl.elements.LattePhpPropertyElementImpl"
                        implements="com.jantvrdik.intellij.latte.psi.elements.LattePhpPropertyElement"
                        elementTypeClass="com.jantvrdik.intellij.latte.indexes.stubs.types.LattePhpPropertyStubType"
                        methods=[
                            getName setName getNameIdentifier getTextElement getPropertyName getPhpArrayLevel
                            getReturnType isStatic getPhpStatementPart
                        ]
                    }

phpClassReference    ::= (T_PHP_NAMESPACE_RESOLUTION? <<isNamespace>> phpNamespaceReference)? (T_PHP_NAMESPACE_RESOLUTION <<isNamespace>> phpNamespaceReference)* phpClassUsage {
                    mixin="com.jantvrdik.intellij.latte.psi.impl.elements.LattePhpClassReferenceElementImpl"
                    implements="com.jantvrdik.intellij.latte.psi.elements.LattePhpClassReferenceElement"
                    elementTypeClass="com.jantvrdik.intellij.latte.indexes.stubs.types.LattePhpClassStubType"
                    methods = [
                        getName setName getNameIdentifier getClassName getTextElement getPhpArrayLevel
                        getPhpArrayUsageList getPhpType getPhpStatementPart
                    ]
                }

phpClassUsage       ::= T_PHP_NAMESPACE_RESOLUTION (T_PHP_IDENTIFIER | T_PHP_NAMESPACE_REFERENCE)? {
                    mixin="com.jantvrdik.intellij.latte.psi.impl.elements.LattePhpClassUsageElementImpl"
                    implements="com.jantvrdik.intellij.latte.psi.elements.LattePhpClassUsageElement"
                    methods = [
                        getName setName getNameIdentifier getTextElement getClassName getPhpType getPhpArrayLevel
                        getPhpArrayUsageList isTemplateType getPhpStatementPart
                    ]
                }

phpNamespaceReference    ::= T_PHP_NAMESPACE_REFERENCE {
                     mixin="com.jantvrdik.intellij.latte.psi.impl.elements.LattePhpNamespaceReferenceElementImpl"
                     implements="com.jantvrdik.intellij.latte.psi.elements.LattePhpNamespaceReferenceElement"
                     elementTypeClass="com.jantvrdik.intellij.latte.indexes.stubs.types.LattePhpNamespaceStubType"
                     methods = [
                         getName setName getNameIdentifier getTextElement getNamespaceName getPhpArrayLevel
                         getPhpArrayUsageList getPhpType getPhpStatementPart
                     ]
                 }

macroModifier    ::= T_MACRO_FILTERS {
                        mixin="com.jantvrdik.intellij.latte.psi.impl.elements.LatteMacroModifierElementImpl"
                        implements="com.jantvrdik.intellij.latte.psi.elements.LatteMacroModifierElement"
                        elementTypeClass="com.jantvrdik.intellij.latte.indexes.stubs.types.LatteFilterStubType"
                        methods=[getName setName getNameIdentifier getTextElement getModifierName isVariableModifier]
                    }

phpStatement       ::= phpStatementFirstPart phpStatementPart* {
                methods=[getPhpType isPhpVariableOnly isPhpClassReferenceOnly getLastPhpElement]
                }

phpStatementFirstPart    ::= phpVariable | phpMethod | phpClassReference {
                    methods=[getPhpType getPhpStatement getPrevPhpStatementPart getPhpElement]
                    implements="com.jantvrdik.intellij.latte.psi.elements.LattePhpStatementPartElement"
                }

phpStatementPart    ::= phpDefinition | phpStatic {
                    methods=[getPhpType getPhpStatement getPrevPhpStatementPart getPhpElement]
                    implements="com.jantvrdik.intellij.latte.psi.elements.LattePhpStatementPartElement"
                 }

phpType       ::= (T_PHP_NULL_MARK | "?")? phpTypePart (T_PHP_OR_INCLUSIVE phpTypePart)* {
                    mixin="com.jantvrdik.intellij.latte.psi.impl.elements.LattePhpTypeElementImpl"
                    implements="com.jantvrdik.intellij.latte.psi.elements.LattePhpTypeElement"
                    elementTypeClass="com.jantvrdik.intellij.latte.indexes.stubs.types.LattePhpTypeStubType"
                }

phpTypePart       ::= (T_PHP_TYPE | T_PHP_NULL | T_PHP_MIXED | phpClassReference) phpTypeIterable*

phpTypeIterable       ::= T_PHP_LEFT_BRACKET T_PHP_RIGHT_BRACKET

phpTypedArguments       ::= phpFirstTypedVariable | (phpTypedVariable "," phpTypedVariable ("," phpTypedVariable)*)

phpFirstTypedVariable       ::= phpType phpVariable {
                         methods=[getReturnType]
                         implements="com.jantvrdik.intellij.latte.psi.elements.LattePhpTypedPartElement"
                     }

phpTypedVariable       ::= phpType? phpVariable {
                         methods=[getReturnType]
                         implements="com.jantvrdik.intellij.latte.psi.elements.LattePhpTypedPartElement"
                     }

phpKeyArrayItem   ::= phpArrayKey (T_PHP_DOUBLE_ARROW | "=>") phpArrayValue

phpArrayKey   ::= phpPrivateArgument* {
                    methods=[getPhpType]
                    implements="com.jantvrdik.intellij.latte.psi.elements.LattePhpExpressionElement"
                }

phpArrayValue   ::= phpPrivateArgument* {
                   methods=[getPhpType]
                   implements="com.jantvrdik.intellij.latte.psi.elements.LattePhpExpressionElement"
               }

phpForeach       ::= T_WHITESPACE? phpExpression T_WHITESPACE? T_PHP_AS T_WHITESPACE? ((T_PHP_REFERENCE_OPERATOR? T_WHITESPACE? phpVariable) | phpArrayOfVariables) (T_WHITESPACE? T_PHP_DOUBLE_ARROW T_WHITESPACE? ((T_PHP_REFERENCE_OPERATOR? T_WHITESPACE? phpVariable) | phpArrayOfVariables))?

phpFor          ::= T_WHITESPACE? phpInternalExpression* T_WHITESPACE? ";" T_WHITESPACE? phpInternalExpression* T_WHITESPACE? ";" T_WHITESPACE? phpInternalExpression* T_WHITESPACE?

phpArrayOfVariables        ::= T_WHITESPACE? T_PHP_LEFT_BRACKET T_WHITESPACE? phpVariable? ( T_WHITESPACE? "," T_WHITESPACE? phpVariable? )* ","? T_WHITESPACE? T_PHP_RIGHT_BRACKET T_WHITESPACE?

phpArray        ::= T_PHP_LEFT_BRACKET phpArrayDefinitionContent T_PHP_RIGHT_BRACKET | T_PHP_ARRAY T_PHP_LEFT_NORMAL_BRACE phpArrayDefinitionContent T_PHP_RIGHT_NORMAL_BRACE

phpArrayUsage     ::= phpArrayUsageItem

private
phpArrayUsageItem     ::= T_PHP_LEFT_BRACKET phpArrayContent T_PHP_RIGHT_BRACKET

phpArrayContent    ::= (T_WHITESPACE? (phpArgument | T_MACRO_ARGS) T_WHITESPACE?)*

phpArrayDefinitionContent    ::= phpArrayItem ("," phpArrayItem)* ","?

phpArrayItem   ::= (phpArrayKey (T_PHP_DOUBLE_ARROW | "=>"))? phpArrayValue

private
phpMethodDefinition       ::= T_WHITESPACE? (T_PHP_DOUBLE_COLON | T_PHP_OBJECT_OPERATOR) T_WHITESPACE? phpMethod

private
phpArgumentList       ::= (T_PHP_LEFT_NORMAL_BRACE T_WHITESPACE? T_PHP_RIGHT_NORMAL_BRACE) | (T_PHP_LEFT_NORMAL_BRACE phpMethodArgs T_PHP_RIGHT_NORMAL_BRACE)

phpInBrackets       ::= T_PHP_LEFT_NORMAL_BRACE T_WHITESPACE? phpArgument+ T_WHITESPACE? T_PHP_RIGHT_NORMAL_BRACE

phpMethodArgs       ::= T_WHITESPACE? phpArgument+ ( T_WHITESPACE? "," T_WHITESPACE? phpArgument+ )* T_WHITESPACE?

phpString    ::=  phpSingleQuotedString | phpDoubleQuotedString | T_MACRO_ARGS_STRING

private
phpArgument    ::= phpPrivateArgument | T_PHP_AS | T_PHP_DOUBLE_ARROW

private
phpPrivateArgument    ::=  phpString | phpArrayOfVariables | phpTypedArguments | phpStatement | phpType | T_MACRO_ARGS_NUMBER
                    | phpArray | phpDefinition | phpMethod | phpClassReference
                    | phpStatic | phpInBrackets | phpVariable | T_PHP_NULL_MARK | T_PHP_CONTENT_TYPE | T_PHP_OBJECT_OPERATOR
                    | T_PHP_RELATIONAL_OPERATOR | T_PHP_ASSIGNMENT_OPERATOR | T_PHP_LOGIC_OPERATOR | T_PHP_OPERATOR
                    | T_PHP_ADDITIVE_OPERATOR | T_PHP_BITWISE_OPERATOR | T_PHP_REFERENCE_OPERATOR | T_PHP_SHIFT_OPERATOR
                    | T_PHP_DOUBLE_COLON | T_PHP_METHOD | T_PHP_TYPE | T_PHP_KEYWORD
                    | T_PHP_CAST | T_PHP_NAMESPACE_RESOLUTION | T_BLOCK_NAME | T_PHP_COLON
                    | T_PHP_CONCATENATION | T_PHP_MULTIPLICATIVE_OPERATORS | T_PHP_UNARY_OPERATOR
                    | T_PHP_EXPRESSION | T_PHP_NEW | T_PHP_NULL | T_PHP_MIXED | T_PHP_LEFT_CURLY_BRACE | T_PHP_RIGHT_CURLY_BRACE
                    | macroModifier | T_PHP_IDENTIFIER | T_PHP_MACRO_SEPARATOR | T_PHP_OR_INCLUSIVE | T_PHP_DEFINITION_OPERATOR

phpExpression    ::= (expression | T_MACRO_ARGS)* {
                           methods=[getPhpType getPhpArrayLevel]
                           implements="com.jantvrdik.intellij.latte.psi.elements.LattePhpExpressionElement"
                       }

private
phpInternalExpression    ::= expression | T_PHP_AS | T_PHP_DOUBLE_ARROW | T_MACRO_ARGS

private
expression    ::= T_PHP_OR_INCLUSIVE | T_PHP_MACRO_SEPARATOR | phpPrivateArgument
                    | T_PHP_LEFT_NORMAL_BRACE | T_PHP_RIGHT_NORMAL_BRACE | T_PHP_LEFT_BRACKET | T_PHP_RIGHT_BRACKET

private
phpDefinition    ::= phpMethodDefinition | phpConstantDefinition | phpPropertyDefinition

private
phpStatic ::= T_WHITESPACE? T_PHP_DOUBLE_COLON T_WHITESPACE? phpStaticVariable

private
phpConstantDefinition ::= T_WHITESPACE? T_PHP_DOUBLE_COLON T_WHITESPACE? phpConstant

private
phpPropertyDefinition ::= T_WHITESPACE? T_PHP_OBJECT_OPERATOR T_WHITESPACE? phpProperty

private
phpSingleQuotedString ::= T_PHP_SINGLE_QUOTE_LEFT T_MACRO_ARGS_STRING? T_PHP_SINGLE_QUOTE_RIGHT {pin=1}

private
phpDoubleQuotedString ::= T_PHP_DOUBLE_QUOTE_LEFT (T_MACRO_ARGS_STRING | phpVariable)* T_PHP_DOUBLE_QUOTE_RIGHT {pin=1}


// tokens sets
private
structureToken   ::= outerHtml | macro | netteAttr
                          | pairMacro | unpairedMacro // this two (pair | unpaired) are here only for error resolve in annotator


private
topLevelTokens   ::= T_MACRO_CLASSIC T_MACRO_CONTENT T_PHP_CONTENT T_PHP_METHOD topLevelTokens
